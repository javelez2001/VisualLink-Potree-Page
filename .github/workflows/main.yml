name: Deploy on EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Build and Deploy to Home Directory
    runs-on: self-hosted

    env:
      # Define deployment paths in user's home directory
      MAIN_APP_DEPLOY_PATH: "${HOME}/potree_app_main" # Expands to /home/your_runner_user/potree_app_main
      INTERNAL_SERVER_DEPLOY_PATH: "${HOME}/potree_app_internal_server"

      # GitHub Secrets for .env file
      GULP_PROXY_TO_INTERNAL_HEADER_VALUE_SECRET: ${{ secrets.SERVER_SIDE_HEADER }}

      
      NODE_ENV: production

    steps:
      - name: Checkout repository to a temporary location
        uses: actions/checkout@v4
        with:
          path: temp_checkout # Checkout to a subdirectory in the workspace

      - name: Prepare Main App Deployment Directory
        run: |
          echo "Preparing Main App directory: ${{ env.MAIN_APP_DEPLOY_PATH }}"
          if [ -d "${{ env.MAIN_APP_DEPLOY_PATH }}" ]; then
            echo "Removing old Main App deployment..."
            rm -rf "${{ env.MAIN_APP_DEPLOY_PATH }}"
          fi
          mkdir -p "${{ env.MAIN_APP_DEPLOY_PATH }}"
          echo "Copying Main App files..."
          # Copy all files except InternalServer directory
          rsync -av --exclude 'InternalServer/' ${{ github.workspace }}/temp_checkout/ "${{ env.MAIN_APP_DEPLOY_PATH }}/"

      - name: Prepare Internal Server Deployment Directory
        run: |
          cp -R ${{ github.workspace }}/temp_checkout/internalServer/* "${{ env.INTERNAL_SERVER_DEPLOY_PATH }}/"
          
      - name: Create .env file in Main App Directory
        run: |
          echo "Creating .env file in ${{ env.MAIN_APP_DEPLOY_PATH }}"
          ENV_FILE_PATH="${{ env.MAIN_APP_DEPLOY_PATH }}/.env"
          echo "SERVER_SIDE_HEADER=${{ env.SERVER_SIDE_HEADER }}" > "$ENV_FILE_PATH"
          cat "$ENV_FILE_PATH"
      
      - name: Copy .env file to Internal Server Directory
        run: |
          echo "Copying .env file to ${{ env.INTERNAL_SERVER_DEPLOY_PATH }}"
          cp "${{ env.MAIN_APP_DEPLOY_PATH }}/.env" "${{ env.INTERNAL_SERVER_DEPLOY_PATH }}/.env"
          cat "${{ env.INTERNAL_SERVER_DEPLOY_PATH }}/.env"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      # --- Stop any previously running servers ---
      - name: Stop Previous Gulp Server (Port 1234)
        run: |
          echo "Attempting to stop process on port 1234..."
          PID_TO_KILL=$(sudo lsof -t -i:1234)
          if [ -n "$PID_TO_KILL" ]; then echo "Killing $PID_TO_KILL"; sudo kill -9 $PID_TO_KILL; screen -X -S main quit; else echo "No process on 1234."; fi
        continue-on-error: true

      - name: Stop Previous Internal Server (Port 3000)
        run: |
          echo "Attempting to stop process on port 3000..."
          PID_TO_KILL=$(sudo lsof -t -i:3000)
          if [ -n "$PID_TO_KILL" ]; then echo "Killing $PID_TO_KILL"; sudo kill -9 $PID_TO_KILL; screen -X -S internal quit; else echo "No process on 3000."; fi
        continue-on-error: true
        
      - name: Install Dependencies for Internal Server
        run: |
          cd "${{ env.INTERNAL_SERVER_DEPLOY_PATH }}"
          echo "Current directory before npm ci for Internal Server: $(pwd)"
          echo "Listing files in current directory:"
          ls -la
          if [ -f "package.json" ]; then
            echo "package.json found. Running npm ci..."
            npm ci
            echo "npm ci complete for Internal Server."
          else
            echo "No package.json in ${{ env.INTERNAL_SERVER_DEPLOY_PATH }}. Skipping npm ci for Internal Server."
          fi
 

      - name: Start Internal Server (Express) in background
        run: |
          echo "Starting Internal Server from ${{ env.INTERNAL_SERVER_DEPLOY_PATH }}..."
          cd "${{ env.INTERNAL_SERVER_DEPLOY_PATH }}"
          screen -dmS internal node internalServer.js
          echo "Started Internal Server Screen at internal"
          sleep 3
      
      # --- Main Gulp Project ---
      - name: Install Dependencies for Gulp Project
        run: |
          cd "${{ env.MAIN_APP_DEPLOY_PATH }}"
          npm ci

      - name: Run Gulp Build
        run: | 
          cd "${{ env.MAIN_APP_DEPLOY_PATH }}"
          npm install del
          npx gulp build


      - name: Start Gulp Server in background
        run: |
          echo "Starting Gulp Server from ${{ env.MAIN_APP_DEPLOY_PATH }}..."
          cd "${{ env.MAIN_APP_DEPLOY_PATH }}"
          screen -dmS main npx gulp 
          echo "Started Gulp Server Screen at main"
          sleep 5
          
      - name: Wait for Gulp Server to be Ready (Port 1234)
        run: |
          echo "Waiting for Gulp server on port 1234..."
          RETRY_COUNT=0
          MAX_RETRIES=24 # Wait for up to 2 minutes (24 * 5 seconds)
          SLEEP_INTERVAL=5
          until $(curl --output /dev/null --silent --head --fail http://localhost:1234); do
            RETRY_COUNT=$((RETRY_COUNT+1))
            if [ "$RETRY_COUNT" -gt "$MAX_RETRIES" ]; then
              echo "ERROR: Gulp server on port 1234 did not become ready after $MAX_RETRIES retries."
              echo "--- Last 50 lines of Gulp Server Log ---"
              tail -n 50 ${{ env.MAIN_APP_DEPLOY_PATH }}/gulp_server.log || echo "gulp_server.log not found or empty."
              exit 1 # Fail the step
            fi
            echo "Gulp server not ready yet (attempt $RETRY_COUNT/$MAX_RETRIES). Retrying in $SLEEP_INTERVAL seconds..."
            sleep $SLEEP_INTERVAL
          done
          echo "SUCCESS: Gulp server on port 1234 is ready."

      - name: Wait for Internal Server to be Ready (Port 3000)
        run: |
          echo "Waiting for Internal server on port 3000..."
          RETRY_COUNT=0
          MAX_RETRIES=12 # Wait for up to 1 minute (12 * 5 seconds)
          SLEEP_INTERVAL=5
          until $(curl --output /dev/null --silent --head --fail http://localhost:3000); do
            RETRY_COUNT=$((RETRY_COUNT+1))
            if [ "$RETRY_COUNT" -gt "$MAX_RETRIES" ]; then
              echo "ERROR: Internal server on port 3000 did not become ready after $MAX_RETRIES retries."
              echo "--- Last 50 lines of Internal Server Log ---"
              tail -n 50 ${{ env.INTERNAL_SERVER_APP_DEPLOY_PATH }}/internal_server.log || echo "internal_server.log not found or empty."
              exit 1 # Fail the step
            fi
            echo "Internal server not ready yet (attempt $RETRY_COUNT/$MAX_RETRIES). Retrying in $SLEEP_INTERVAL seconds..."
            sleep $SLEEP_INTERVAL
          done
          echo "SUCCESS: Internal server on port 3000 is ready."

      - name: Final Server Checks (Ports and Logs)
        run: |
          echo "--- Verifying Listening Ports ---"
          echo "Specific check for port 1234 (Gulp Server):"
          if ss -tulnp | grep ':1234' | grep -q LISTEN; then
            echo "PORT CHECK SUCCESS: Port 1234 is being listened on."
          else
            echo "PORT CHECK ERROR: Port 1234 is NOT being listened on."
          fi
          
          echo "Specific check for port 3000 (Internal Server):"
          if ss -tulnp | grep ':3000' | grep -q LISTEN; then
            echo "PORT CHECK SUCCESS: Port 3000 is being listened on."
          else
            echo "PORT CHECK ERROR: Port 3000 is NOT being listened on."
          fi

          echo "--- Gulp Server Log (Last 20 lines) ---"
          tail -n 20 ${{ env.MAIN_APP_DEPLOY_PATH }}/gulp_server.log || echo "gulp_server.log not found or empty."
          echo "--- Internal Server Log (Last 20 lines) ---"
          tail -n 20 ${{ env.INTERNAL_SERVER_APP_DEPLOY_PATH }}/internal_server.log || echo "internal_server.log not found or empty."
